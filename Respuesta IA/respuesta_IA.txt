# Integración con Aplicaciones Web

## 🔹 Integrar bases de datos en aplicaciones Flask/Django

### Flask con SQLAlchemy
Flask usa SQLAlchemy para interactuar con bases de datos relacionales.
```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mi_base.db'
db = SQLAlchemy(app)

class Usuario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nombre = db.Column(db.String(100), nullable=False)

db.create_all()
```

### Django con ORM
Django tiene un ORM integrado para manejar bases de datos.
```python
from django.db import models

class Usuario(models.Model):
    nombre = models.CharField(max_length=100)
```

Configurar la base de datos en `settings.py`:
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
```

Ejecutar migraciones:
```sh
python manage.py makemigrations
python manage.py migrate
```

---

## 🔹 Creación de una API REST para interactuar con la base de datos

### Flask con Flask-RESTful
```python
from flask import Flask, request
from flask_restful import Api, Resource

app = Flask(__name__)
api = Api(app)

class Usuario(Resource):
    def get(self):
        return {"mensaje": "Lista de usuarios"}

api.add_resource(Usuario, "/usuarios")

if __name__ == "__main__":
    app.run(debug=True)
```

### Django con Django REST Framework (DRF)
Instalar DRF:
```sh
pip install djangorestframework
```

Definir la vista:
```python
from rest_framework import viewsets
from .models import Usuario
from .serializers import UsuarioSerializer

class UsuarioViewSet(viewsets.ModelViewSet):
    queryset = Usuario.objects.all()
    serializer_class = UsuarioSerializer
```

Definir el `serializer`:
```python
from rest_framework import serializers
from .models import Usuario

class UsuarioSerializer(serializers.ModelSerializer):
    class Meta:
        model = Usuario
        fields = '__all__'
```

Configurar las rutas en `urls.py`:
```python
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import UsuarioViewSet

router = DefaultRouter()
router.register(r'usuarios', UsuarioViewSet)

urlpatterns = [
    path('api/', include(router.urls)),
]
```

---

## 🔹 Seguridad en bases de datos: inyección SQL, hashing de contraseñas

### Prevención de Inyección SQL
Usar consultas parametrizadas en lugar de concatenación de strings:
```python
cursor.execute("SELECT * FROM usuarios WHERE nombre = ?", (nombre,))
```

### Hashing de contraseñas
Usar `bcrypt` para almacenar contraseñas de manera segura:
```python
import bcrypt

password = "secreto".encode('utf-8')
hashed = bcrypt.hashpw(password, bcrypt.gensalt())

if bcrypt.checkpw(password, hashed):
    print("Contraseña correcta")
```

---

## 🔹 Despliegue de aplicaciones con bases de datos en la nube

### Opciones de despliegue
- **Heroku**: Ideal para aplicaciones pequeñas y medianas.
- **AWS RDS**: Para bases de datos escalables en la nube.
- **Google Cloud SQL**: Integración con otros servicios de Google.

### Desplegar Flask en Heroku
```sh
git init
git add .
git commit -m "Primer commit"
heroku create mi-app
heroku addons:create heroku-postgresql:hobby-dev
heroku config:set FLASK_APP=app.py
heroku config:set DATABASE_URL=$(heroku config:get DATABASE_URL)
git push heroku main
heroku open
```

### Desplegar Django en AWS RDS
Configurar `DATABASES` en `settings.py`:
```python
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'mi_base',
        'USER': 'mi_usuario',
        'PASSWORD': 'mi_contraseña',
        'HOST': 'mi-endpoint.rds.amazonaws.com',
        'PORT': '5432',
    }
}
```

Con estos conceptos, puedes integrar y desplegar bases de datos en aplicaciones web de forma segura y eficiente. 🚀
